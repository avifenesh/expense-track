generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  SELF
  PARTNER
  JOINT
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Currency {
  USD
  EUR
  ILS
}

model Account {
  id                 String               @id @default(cuid())
  name               String
  type               AccountType
  preferredCurrency  Currency?
  color              String?
  icon               String?
  description        String?
  transactions       Transaction[]
  budgets            Budget[]
  recurringTemplates RecurringTemplate[]
  holdings           Holding[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@unique([name])
}

model Category {
  id                 String               @id @default(cuid())
  name               String
  type               TransactionType
  color              String?
  isHolding          Boolean              @default(false)
  isArchived         Boolean              @default(false)
  transactions       Transaction[]
  budgets            Budget[]
  recurringTemplates RecurringTemplate[]
  holdings           Holding[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@unique([name, type])
}

model Transaction {
  id          String           @id @default(cuid())
  account     Account          @relation(fields: [accountId], references: [id])
  accountId   String
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  String
  type        TransactionType
  amount      Decimal          @db.Decimal(12, 2)
  currency    Currency         @default(USD)
  date        DateTime
  month       DateTime
  description String?
  isRecurring Boolean          @default(false)
  isMutual    Boolean          @default(false)
  recurringTemplate   RecurringTemplate? @relation(fields: [recurringTemplateId], references: [id])
  recurringTemplateId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([month])
  @@index([accountId, month])
}

model Budget {
  id         String    @id @default(cuid())
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  month      DateTime
  planned    Decimal   @db.Decimal(12, 2)
  currency   Currency  @default(USD)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([accountId, categoryId, month])
  @@index([month])
}

model RecurringTemplate {
  id          String           @id @default(cuid())
  account     Account          @relation(fields: [accountId], references: [id])
  accountId   String
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  String
  type        TransactionType
  amount      Decimal          @db.Decimal(12, 2)
  currency    Currency         @default(USD)
  dayOfMonth  Int
  description String?
  isActive    Boolean          @default(true)
  startMonth  DateTime
  endMonth    DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  transactions Transaction[]

  @@index([isActive])
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   Currency
  targetCurrency Currency
  rate           Decimal  @db.Decimal(12, 6)
  date           DateTime
  fetchedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([baseCurrency, targetCurrency, date])
  @@index([fetchedAt])
}

model Holding {
  id          String   @id @default(cuid())
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  symbol      String
  quantity    Decimal  @db.Decimal(18, 6)
  averageCost Decimal  @db.Decimal(12, 2)
  currency    Currency @default(USD)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([accountId, categoryId, symbol])
  @@index([accountId])
  @@index([categoryId])
}

model StockPrice {
  id            String   @id @default(cuid())
  symbol        String
  price         Decimal  @db.Decimal(12, 4)
  currency      Currency @default(USD)
  changePercent Decimal? @db.Decimal(8, 4)
  volume        BigInt?
  fetchedAt     DateTime @default(now())
  source        String   @default("alphavantage")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([symbol, fetchedAt])
  @@index([symbol, fetchedAt(sort: Desc)])
}
