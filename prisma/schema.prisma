generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String              @id @default(cuid())
  name              String              @unique
  type              AccountType
  preferredCurrency Currency?
  color             String?
  icon              String?
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  budgets           Budget[]
  holdings          Holding[]
  recurringTemplates RecurringTemplate[]
  transactions      Transaction[]
}

model Budget {
  id         String   @id @default(cuid())
  accountId  String
  categoryId String
  month      DateTime
  planned    Decimal  @db.Decimal(12, 2)
  currency   Currency @default(USD)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  account    Account  @relation(fields: [accountId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([accountId, categoryId, month])
  @@index([month])
}

model Category {
  id                String              @id @default(cuid())
  name              String
  type              TransactionType
  color             String?
  isHolding         Boolean             @default(false)
  isArchived        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  budgets           Budget[]
  holdings          Holding[]
  recurringTemplates RecurringTemplate[]
  transactions      Transaction[]

  @@unique([name, type])
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   Currency
  targetCurrency Currency
  rate           Decimal  @db.Decimal(12, 6)
  date           DateTime
  fetchedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([baseCurrency, targetCurrency, date])
  @@index([fetchedAt])
}

model Holding {
  id          String   @id @default(cuid())
  accountId   String
  categoryId  String
  symbol      String
  quantity    Decimal  @db.Decimal(18, 6)
  averageCost Decimal  @db.Decimal(12, 2)
  currency    Currency @default(USD)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@unique([accountId, categoryId, symbol])
  @@index([accountId])
  @@index([categoryId])
}

model RecurringTemplate {
  id          String          @id @default(cuid())
  accountId   String
  categoryId  String
  type        TransactionType
  amount      Decimal         @db.Decimal(12, 2)
  currency    Currency        @default(USD)
  dayOfMonth  Int
  description String?
  isActive    Boolean         @default(true)
  startMonth  DateTime
  endMonth    DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  account     Account         @relation(fields: [accountId], references: [id])
  category    Category        @relation(fields: [categoryId], references: [id])
  transactions Transaction[]

  @@index([isActive])
}

model StockPrice {
  id            String   @id @default(cuid())
  symbol        String
  price         Decimal  @db.Decimal(12, 4)
  currency      Currency @default(USD)
  changePercent Decimal? @db.Decimal(8, 4)
  volume        BigInt?
  fetchedAt     DateTime @default(now())
  source        String   @default("alphavantage")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([symbol, fetchedAt])
  @@index([symbol, fetchedAt(sort: Desc)])
}

model Transaction {
  id                  String             @id @default(cuid())
  accountId           String
  categoryId          String
  type                TransactionType
  amount              Decimal            @db.Decimal(12, 2)
  date                DateTime
  month               DateTime
  description         String?
  isRecurring         Boolean            @default(false)
  isMutual            Boolean            @default(false)
  recurringTemplateId String?
  currency            Currency           @default(USD)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  account             Account            @relation(fields: [accountId], references: [id])
  category            Category           @relation(fields: [categoryId], references: [id])
  recurringTemplate   RecurringTemplate? @relation(fields: [recurringTemplateId], references: [id])

  @@index([accountId, month])
  @@index([month])
}

enum AccountType {
  SELF
  PARTNER
  JOINT
  OTHER
}

enum Currency {
  USD
  EUR
  ILS
}

enum TransactionType {
  INCOME
  EXPENSE
}
